/*
 * Make me a sandwich
 *
 * This is the Swagger 2.0 API for Web Architectures course group project work. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: mikko.nurminen@tuni.fi
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using server_a.ApiModels;

namespace server_a.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SandwichController : ControllerBase
    {
        /// <summary>
        /// Add a new sandwich to the store. Needs an API key.
        /// </summary>

        /// <param name="body">Sandwich object that needs to be added to the store</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/v1/sandwich")]
        //Require Auth
        public virtual IActionResult AddSandwich([FromBody] Sandwich body)
        {
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a sandwich
        /// </summary>

        /// <param name="sandwichId">Sandwich id to delete</param>
        /// <param name="apiKey"></param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Sandwich not found</response>
        [HttpDelete]
        [Route("/v1/sandwich/{sandwichId}")]
        //require auth
        public virtual IActionResult DeleteSandwich([FromRoute][Required] long? sandwichId, [FromHeader] string apiKey)
        {
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Find sandwich by ID
        /// </summary>
        /// <remarks>Returns a single sandwich</remarks>
        /// <param name="sandwichId">ID of sandwich to return</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Sandwich not found</response>
        [HttpGet]
        [Route("/v1/sandwich/{sandwichId}")]
        //Require Auth
        [ProducesResponseType(statusCode: 200, type: typeof(Sandwich))]
        public virtual IActionResult GetSandwichById([FromRoute][Required] long? sandwichId)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Sandwich));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a list of all sandwiches. Empty array if no sandwiches are found.
        /// </summary>
        /// <response code="200">successful operation</response>
        [HttpGet]
        [Route("/v1/sandwich")]
        [ProducesResponseType(statusCode: 200, type: typeof(List<Sandwich>))]
        public virtual IActionResult GetSandwiches()
        {
            var result = new List<Sandwich> {
                new() { Id = 1, Name = "Ham and cheese", BreadType = BreadTypeEnum.Wheat},
                new() { Id = 2, Name = "Vegetarian", BreadType = BreadTypeEnum.Rye }
            };
            return Ok(result);
        }

        /// <summary>
        /// Updates a sandwich in the store with JSON in body
        /// </summary>

        /// <param name="sandwichId">ID of sandwich to return</param>
        /// <param name="body">Sandwich object that needs to be added to the store</param>
        /// <response code="405">Invalid input</response>
        [HttpPost]
        [Route("/v1/sandwich/{sandwichId}")]
        //Require Auth
        public virtual IActionResult UpdateSandwich([FromRoute][Required] long? sandwichId, [FromBody] Sandwich body)
        {
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);


            throw new NotImplementedException();
        }
    }
}
