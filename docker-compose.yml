version: "3"

services:
  rabbitmq:
    image: rabbitmq:3-management
    networks:
      - backend
    ports:
    - "5672:5672"
    - "15672:15672"
    environment:
    - RABBITMQ_DEFAULT_USER=guest
    - RABBITMQ_DEFAULT_PASS=guest

  server-a:
    build:
      context: ./backend/server-a
    ports:
      - "12345:8080"
    networks:
      - backend
    environment:
      - RabbitMQ_Host=rabbitmq
    depends_on:
      - rabbitmq


  server-b:
    build:
      context: ./backend/server-b
    environment:
      - RabbitMQ_Host=rabbitmq
    restart: always
    networks:
      - backend
    depends_on:
      - rabbitmq


  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases
  # database-service would go here.
  #database:

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
networks:
  backend:

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:
